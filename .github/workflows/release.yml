name: Create Release

on:
  push:
    tags:
      - 'v*.*.*' # Trigger on version tags like v1.0.0, v1.1.0, etc.

jobs:
  build-and-release:
    name: Build and Release for Windows
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required to create a GitHub release

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build g++-mingw-w64-x86-64 zip

      - name: Configure CMake
        run: cmake --preset mingw-release

      - name: Build with CMake
        run: cmake --build --preset release

      - name: Package release assets
        run: |
          # Create a staging directory to gather all release files.
          mkdir staging

          # Copy the main executable and documentation into the staging directory.
          cp build/mingw-release/ScreenLight.exe staging/
          cp README.md staging/
          cp LICENSE.md staging/

          # Find and copy the required MinGW runtime DLLs. Using `find` is robust
          # as the exact toolchain path can vary on different runner images.
          find /usr/lib/gcc/x86_64-w64-mingw32 -name "libstdc++-6.dll" -exec cp {} staging/ \;
          find /usr/lib/gcc/x86_64-w64-mingw32 -name "libgcc_s_seh-1.dll" -exec cp {} staging/ \;
          find /usr/lib/gcc/x86_64-w64-mingw32 -name "libwinpthread-1.dll" -exec cp -n {} staging/ \; || echo "libwinpthread-1.dll not found, continuing without it."

          # Create the final zip archive. The -j flag "junks" paths, putting all files in the root of the zip.
          zip -j ScreenLight-windows-x64.zip staging/*

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: ScreenLight-windows-x64.zip
          generate_release_notes: true # Automatically create release notes from commits